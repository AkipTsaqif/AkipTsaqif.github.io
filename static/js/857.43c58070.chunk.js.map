{"version":3,"file":"static/js/857.43c58070.chunk.js","mappings":"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","sources":["webpack://react-complete-guide/./src/components/comments/Comments.module.css?d88e","webpack://react-complete-guide/./src/components/comments/NewCommentForm.module.css?81c1","components/comments/NewCommentForm.js","webpack://react-complete-guide/./src/components/comments/CommentItem.module.css?204f","components/comments/CommentItem.js","webpack://react-complete-guide/./src/components/comments/CommentsList.module.css?06d6","components/comments/CommentsList.js","components/comments/Comments.js","webpack://react-complete-guide/./src/components/quotes/HighlightedQuote.module.css?c98c","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"Comments_comments__joRaS\"};","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"NewCommentForm_form__d0jSO\",\"loading\":\"NewCommentForm_loading__wj-U1\",\"control\":\"NewCommentForm_control__E705J\",\"actions\":\"NewCommentForm_actions__wpbcl\"};","import { useRef, useEffect } from 'react';\nimport useHttp from '../../hooks/use-http';\nimport { addComment } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './NewCommentForm.module.css';\n\nconst NewCommentForm = (props) => {\n  const commentTextRef = useRef();\n\n  const { sendRequest, status, error } = useHttp(addComment);\n  const { onAddedComment } = props;\n\n  useEffect(() => {\n    if (status === 'completed' && !error) {\n      onAddedComment();\n    }\n  }, [status, error])\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    const enteredText = commentTextRef.current.value;\n\n    sendRequest({\n      commentData: {\n        text: enteredText\n      },\n      id: props.quoteId\n    })\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      {status === 'pending' && <div className='centered'>\n          <LoadingSpinner />\n        </div>}\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor='comment'>Komentarmu</label>\n        <textarea id='comment' rows='5' ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className='btn'>Tambah Komentar</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"CommentItem_item__DarMW\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","// extracted by mini-css-extract-plugin\nexport default {\"comments\":\"CommentsList_comments__3US16\"};","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useState, useEffect, useCallback } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport classes from './Comments.module.css';\nimport NewCommentForm from './NewCommentForm';\nimport useHttp from '../../hooks/use-http';\nimport { getAllComments } from '../../lib/api';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport CommentsList from './CommentsList'\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const params = useParams();\n  const { id } = params\n\n  const { sendRequest, status, data: loadedComments } = useHttp(getAllComments)\n\n  useEffect(() => {\n    sendRequest(id);\n  }, [id, sendRequest])\n\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(id)\n  }, [sendRequest, id])\n\n  let comments;\n\n  if (status === 'pending') {\n    comments = <div className='centered'>\n      <LoadingSpinner />\n    </div>\n  }\n\n  if (status === 'completed' && (loadedComments || loadedComments.length > 0)) {\n    comments = <CommentsList comments={loadedComments}/>\n  }\n\n  if (status === 'completed' && (!loadedComments || loadedComments.length === 0)) {\n    comments = <p className='centered'>Belum ada komentar</p>\n  }\n  \n  return (\n    <section className={classes.comments}>\n      <h2>Komentar pengguna</h2>\n      {!isAddingComment && (\n        <button className='btn' onClick={startAddCommentHandler}>\n          Tambah komentar\n        </button>\n      )}\n      {isAddingComment && <NewCommentForm quoteId={params.id} onAddedComment={addedCommentHandler} />}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","// extracted by mini-css-extract-plugin\nexport default {\"quote\":\"HighlightedQuote_quote__NoiQb\"};","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { useEffect } from \"react\";\r\nimport { useParams, Route, Link, useRouteMatch } from \"react-router-dom\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport { getSingleQuote } from '../lib/api'\r\n\r\nconst DUMMY_QUOTES = [\r\n    { id: 1, text: 'Halo Dunia', author: 'Saya' },\r\n    { id: 2, text: 'Melihat Senja', author: 'Saya' },\r\n    { id: 3, text: 'Dalam Naungan Cinta', author: 'Saya' },\r\n    { id: 4, text: 'Bermuka Dua', author: 'Saya' },\r\n]\r\n\r\nconst QuoteDetails = () => {\r\n    const match = useRouteMatch();\r\n    // ganti /quotes/id/:id/ jadi \r\n        // {match.path} buat ganti route path biar fleksibel\r\n        // {match.url} di link biar fleksibel\r\n\r\n    const params = useParams();\r\n    const paramId = params.id;\r\n\r\n    const { sendRequest, status, data: loadedQuote, error } = useHttp(getSingleQuote, true);\r\n\r\n    useEffect(() => {\r\n        sendRequest(paramId);\r\n    }, [sendRequest, paramId])\r\n\r\n    // const quote = DUMMY_QUOTES.find(quote => quote.id === paramId)\r\n\r\n    if (status === 'pending') {\r\n        return (\r\n            <div className=\"centered\">\r\n                <LoadingSpinner />\r\n            </div>\r\n        )\r\n    }\r\n\r\n    if (error) {\r\n        return (\r\n            <p className='centered'>{error}</p>\r\n        )\r\n    }\r\n\r\n    if (!loadedQuote.text) {\r\n        return <p>Quote tidak ditemukan!</p>\r\n    }\r\n    return (\r\n        <div>\r\n            <HighlightedQuote text={loadedQuote.text} author={loadedQuote.author}/>\r\n            <Route path='/quotes/id/:id' exact>\r\n                <div className=\"centered\">\r\n                    <Link className=\"btn--flat\" to={`/quotes/id/${paramId}/comments`}>Buka komentar</Link>\r\n                </div>\r\n            </Route>\r\n            <Route path='/quotes/id/:id/comments'>\r\n                <Comments />\r\n            </Route>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default QuoteDetails;"],"names":["props","commentTextRef","useRef","useHttp","addComment","sendRequest","status","error","onAddedComment","useEffect","submitFormHandler","event","preventDefault","enteredText","current","value","commentData","text","id","quoteId","className","classes","onSubmit","LoadingSpinner","htmlFor","rows","ref","comments","map","comment","useState","isAddingComment","setIsAddingComment","params","useParams","getAllComments","loadedComments","data","addedCommentHandler","useCallback","length","onClick","author","useRouteMatch","paramId","getSingleQuote","loadedQuote","path","exact","to"],"sourceRoot":""}