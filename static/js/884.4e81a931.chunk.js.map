{"version":3,"file":"static/js/884.4e81a931.chunk.js","mappings":"4MACA,EAAuB,mB,SCKvB,EAJa,SAACA,GACZ,OAAO,gBAAKC,UAAWC,EAAhB,SAA+BF,EAAMG,Y,SCF9C,EAAuB,wBAAvB,EAAyD,2BAAzD,EAA8F,2BAA9F,EAAmI,2BCyDnI,EApDkB,SAACH,GACjB,IAAMI,GAAiBC,EAAAA,EAAAA,UACjBC,GAAeD,EAAAA,EAAAA,UACrB,GAAkCE,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KAqBA,OACE,iCACE,SAAC,KAAD,CAAQC,KAAMF,EAAWG,QAAS,SAACC,GAAD,MAAc,oCAChD,SAAC,EAAD,WACE,kBAAMC,QAZe,WACzBJ,GAAa,IAW0BR,UAAWC,EAAcY,SAvBlE,SAA2BC,GACzBA,EAAMC,iBAEN,IAAMC,EAAgBb,EAAec,QAAQC,MACvCC,EAAcd,EAAaY,QAAQC,MAIzCnB,EAAMqB,WAAW,CAAEC,OAAQL,EAAeM,KAAMH,KAe5C,UACGpB,EAAMwB,YACL,gBAAKvB,UAAWC,EAAhB,UACE,SAACuB,EAAA,EAAD,OAIJ,iBAAKxB,UAAWC,EAAhB,WACE,kBAAOwB,QAAQ,SAAf,qBACA,kBAAOC,KAAK,OAAOC,GAAG,SAASC,IAAKzB,QAEtC,iBAAKH,UAAWC,EAAhB,WACE,kBAAOwB,QAAQ,OAAf,mBACA,qBAAUE,GAAG,OAAOE,KAAK,IAAID,IAAKvB,QAEpC,gBAAKL,UAAWC,EAAhB,UACE,mBAAQ6B,QAxBY,WAC5BtB,GAAa,IAuBmCR,UAAU,MAAlD,kC,kBCzBZ,EAnBiB,WACb,IAAM+B,GAAUC,EAAAA,EAAAA,MAChB,GAAgCC,EAAAA,EAAAA,GAAQC,EAAAA,IAAhCC,EAAR,EAAQA,YAAaC,EAArB,EAAqBA,QAErBC,EAAAA,EAAAA,YAAU,WACS,cAAXD,GACAL,EAAQO,KAAK,aAElB,CAACF,EAAQL,IAMZ,OACI,SAAC,EAAD,CAAWR,UAAsB,YAAXa,EAAsBhB,WALxB,SAACmB,GACrBJ,EAAYI","sources":["webpack://react-complete-guide/./src/components/UI/Card.module.css?26d0","components/UI/Card.js","webpack://react-complete-guide/./src/components/quotes/QuoteForm.module.css?b10c","components/quotes/QuoteForm.js","pages/NewQuote.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"card\":\"Card_card__vKiqn\"};","import classes from './Card.module.css';\n\nconst Card = (props) => {\n  return <div className={classes.card}>{props.children}</div>;\n};\n\nexport default Card;\n","// extracted by mini-css-extract-plugin\nexport default {\"form\":\"QuoteForm_form__htQOV\",\"loading\":\"QuoteForm_loading__yACR-\",\"control\":\"QuoteForm_control__L1qcQ\",\"actions\":\"QuoteForm_actions__vf3z2\"};","import { useRef, useState } from 'react';\nimport { Prompt } from 'react-router-dom';\nimport Card from '../UI/Card';\nimport LoadingSpinner from '../UI/LoadingSpinner';\nimport classes from './QuoteForm.module.css';\n\nconst QuoteForm = (props) => {\n  const authorInputRef = useRef();\n  const textInputRef = useRef();\n  const [isFocused, setIsFocused] = useState(false);\n\n  function submitFormHandler(event) {\n    event.preventDefault();\n\n    const enteredAuthor = authorInputRef.current.value;\n    const enteredText = textInputRef.current.value;\n\n    // optional: Could validate here\n\n    props.onAddQuote({ author: enteredAuthor, text: enteredText });\n  }\n\n  const formFocusedHandler = () => {\n    setIsFocused(true);\n  }\n\n  const finishEnteringHandler = () => {\n    setIsFocused(false);\n  }\n\n  return (\n    <>\n      <Prompt when={isFocused} message={(location) => 'Ingin meninggalkan laman ini?'} />\n      <Card>\n        <form onFocus={formFocusedHandler} className={classes.form} onSubmit={submitFormHandler}>\n          {props.isLoading && (\n            <div className={classes.loading}>\n              <LoadingSpinner />\n            </div>\n          )}\n\n          <div className={classes.control}>\n            <label htmlFor='author'>Author</label>\n            <input type='text' id='author' ref={authorInputRef} />\n          </div>\n          <div className={classes.control}>\n            <label htmlFor='text'>Text</label>\n            <textarea id='text' rows='5' ref={textInputRef}></textarea>\n          </div>\n          <div className={classes.actions}>\n            <button onClick={finishEnteringHandler} className='btn'>Add Quote</button>\n          </div>\n        </form>\n      </Card>\n    </>\n  );\n};\n\nexport default QuoteForm;\n","import QuoteForm from '../components/quotes/QuoteForm'\r\nimport { useHistory } from 'react-router-dom'\r\nimport useHttp from '../hooks/use-http'\r\nimport { addQuote } from '../lib/api'\r\nimport { useEffect } from 'react'\r\n\r\nconst NewQuote = () => {\r\n    const history = useHistory();\r\n    const { sendRequest, status } = useHttp(addQuote);\r\n\r\n    useEffect(() => {\r\n        if (status === 'completed') {\r\n            history.push('/quotes');\r\n        }\r\n    }, [status, history])\r\n\r\n    const addQuoteHandler = (quote) => {\r\n        sendRequest(quote)\r\n    }\r\n\r\n    return (\r\n        <QuoteForm isLoading={status === 'pending'} onAddQuote={addQuoteHandler} />\r\n    );\r\n}\r\n\r\nexport default NewQuote;"],"names":["props","className","classes","children","authorInputRef","useRef","textInputRef","useState","isFocused","setIsFocused","when","message","location","onFocus","onSubmit","event","preventDefault","enteredAuthor","current","value","enteredText","onAddQuote","author","text","isLoading","LoadingSpinner","htmlFor","type","id","ref","rows","onClick","history","useHistory","useHttp","addQuote","sendRequest","status","useEffect","push","quote"],"sourceRoot":""}